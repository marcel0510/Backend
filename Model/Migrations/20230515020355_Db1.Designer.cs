// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(ScheduleDbContext))]
    [Migration("20230515020355_Db1")]
    partial class Db1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("name");

                    b.Property<int?>("createdById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 14, 21, 3, 55, 515, DateTimeKind.Local).AddTicks(3112));

                    b.Property<int?>("deletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("updatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("isDeleted = 'false'");

                    b.ToTable("Building", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "E16",
                            Name = "Edificio de Eléctrica"
                        },
                        new
                        {
                            Id = 2,
                            Code = "E17",
                            Name = "Edificio de Química/Eléctrica"
                        });
                });

            modelBuilder.Entity("Model.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("buildingId");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("code");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("floor");

                    b.Property<bool>("IsLab")
                        .HasColumnType("bit")
                        .HasColumnName("isLab");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("name");

                    b.Property<int?>("createdById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 14, 21, 3, 55, 515, DateTimeKind.Local).AddTicks(4839));

                    b.Property<int?>("deletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("updatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("Code", "Floor")
                        .HasFilter("isDeleted = 'false'");

                    b.ToTable("Classroom", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingId = 2,
                            Capacity = 25,
                            Code = "E023",
                            Floor = "P6",
                            IsLab = true,
                            Name = "Laboratorioa FIEE CEC 1"
                        },
                        new
                        {
                            Id = 2,
                            BuildingId = 2,
                            Capacity = 35,
                            Code = "E028",
                            Floor = "P5",
                            IsLab = false
                        },
                        new
                        {
                            Id = 3,
                            BuildingId = 2,
                            Capacity = 25,
                            Code = "E026",
                            Floor = "P6",
                            IsLab = true,
                            Name = "Laboratorio FIEE CEC 2"
                        },
                        new
                        {
                            Id = 4,
                            BuildingId = 1,
                            Capacity = 20,
                            Code = "E002",
                            Floor = "P2",
                            IsLab = false
                        },
                        new
                        {
                            Id = 5,
                            BuildingId = 2,
                            Capacity = 20,
                            Code = "LABINTC",
                            Floor = "P7",
                            IsLab = true,
                            Name = "LABORATORIO DE INTERCONECTIVIDAD"
                        },
                        new
                        {
                            Id = 6,
                            BuildingId = 1,
                            Capacity = 20,
                            Code = "E003",
                            Floor = "P2",
                            IsLab = false
                        },
                        new
                        {
                            Id = 7,
                            BuildingId = 2,
                            Capacity = 20,
                            Code = "E022",
                            Floor = "P6",
                            IsLab = false
                        },
                        new
                        {
                            Id = 8,
                            BuildingId = 2,
                            Capacity = 20,
                            Code = "E022",
                            Floor = "P3",
                            IsLab = false
                        },
                        new
                        {
                            Id = 9,
                            BuildingId = 1,
                            Capacity = 20,
                            Code = "E001",
                            Floor = "P2",
                            IsLab = false
                        },
                        new
                        {
                            Id = 10,
                            BuildingId = 2,
                            Capacity = 20,
                            Code = "E004",
                            Floor = "P7",
                            IsLab = false
                        });
                });

            modelBuilder.Entity("Model.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int")
                        .HasColumnName("classroomId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("name");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subjectId");

                    b.Property<int?>("createdById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 14, 21, 3, 55, 515, DateTimeKind.Local).AddTicks(6797));

                    b.Property<int?>("deletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("updatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("Name", "SubjectId")
                        .IsUnique()
                        .HasFilter("isDeleted = 'false'");

                    b.ToTable("Group", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassroomId = 1,
                            Name = "GR1",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClassroomId = 2,
                            Name = "GR1",
                            SubjectId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClassroomId = 3,
                            Name = "GR1",
                            SubjectId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClassroomId = 4,
                            Name = "GR1",
                            SubjectId = 6
                        },
                        new
                        {
                            Id = 5,
                            ClassroomId = 4,
                            Name = "GR1",
                            SubjectId = 7
                        },
                        new
                        {
                            Id = 6,
                            ClassroomId = 4,
                            Name = "GR1",
                            SubjectId = 4
                        },
                        new
                        {
                            Id = 7,
                            ClassroomId = 4,
                            Name = "GR1",
                            SubjectId = 14
                        });
                });

            modelBuilder.Entity("Model.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("day");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("endTime");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("groupId");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("startTime");

                    b.Property<int?>("createdById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 14, 21, 3, 55, 515, DateTimeKind.Local).AddTicks(8642));

                    b.Property<int?>("deletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("updatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Session", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = "Lunes",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            GroupId = 1,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Day = "Martes",
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            GroupId = 1,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Day = "Lunes",
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            GroupId = 2,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Day = "Jueves",
                            EndTime = new TimeSpan(0, 9, 0, 0, 0),
                            GroupId = 2,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Day = "Martes",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            GroupId = 3,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            Day = "Viernes",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            GroupId = 3,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            Day = "Lunes",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            GroupId = 4,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            Day = "Martes",
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            GroupId = 4,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            Day = "Jueves",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            GroupId = 5,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            Day = "Viernes",
                            EndTime = new TimeSpan(0, 9, 0, 0, 0),
                            GroupId = 5,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            Day = "Viernes",
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            GroupId = 6,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            Day = "Lunes",
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            GroupId = 7,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            Day = "Miercoles",
                            EndTime = new TimeSpan(0, 9, 0, 0, 0),
                            GroupId = 7,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            Day = "Viernes",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            GroupId = 7,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Model.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("code");

                    b.Property<bool>("IsLab")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasColumnName("name");

                    b.Property<int>("NumCredits")
                        .HasColumnType("int");

                    b.Property<int>("NumHours")
                        .HasColumnType("int");

                    b.Property<int>("NumSemester")
                        .HasColumnType("int");

                    b.Property<int?>("createdById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 14, 21, 3, 55, 516, DateTimeKind.Local).AddTicks(1041));

                    b.Property<int?>("deletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("updatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("isDeleted = 'false'");

                    b.ToTable("Subject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ITID843",
                            IsLab = false,
                            Name = "ADMINISTRACION DE REDES",
                            NumCredits = 3,
                            NumHours = 4,
                            NumSemester = 8
                        },
                        new
                        {
                            Id = 2,
                            Code = "ITID822",
                            IsLab = false,
                            Name = "EVALUACION DE REDES",
                            NumCredits = 3,
                            NumHours = 4,
                            NumSemester = 8
                        },
                        new
                        {
                            Id = 3,
                            Code = "ITID801",
                            IsLab = false,
                            Name = "HACKING ETICO",
                            NumCredits = 2,
                            NumHours = 3,
                            NumSemester = 8
                        },
                        new
                        {
                            Id = 4,
                            Code = "ITID832",
                            IsLab = false,
                            Name = "REDES DE AREA LOCAL INALAMBRICAS",
                            NumCredits = 3,
                            NumHours = 3,
                            NumSemester = 8
                        },
                        new
                        {
                            Id = 5,
                            Code = "ITID753",
                            IsLab = false,
                            Name = "APLICACIONES WEB Y MOVILES",
                            NumCredits = 3,
                            NumHours = 4,
                            NumSemester = 7
                        },
                        new
                        {
                            Id = 6,
                            Code = "ITID742",
                            IsLab = false,
                            Name = "REDES E INTRANETS",
                            NumCredits = 3,
                            NumHours = 4,
                            NumSemester = 7
                        },
                        new
                        {
                            Id = 7,
                            Code = "ITID713",
                            IsLab = false,
                            Name = "APLICACIONES DISTRIBUIDAS",
                            NumCredits = 2,
                            NumHours = 3,
                            NumSemester = 7
                        },
                        new
                        {
                            Id = 8,
                            Code = "ITID623",
                            IsLab = false,
                            Name = "REDES DE AREA LOCAL",
                            NumCredits = 2,
                            NumHours = 3,
                            NumSemester = 6
                        },
                        new
                        {
                            Id = 9,
                            Code = "ITID623L",
                            IsLab = true,
                            Name = "LABORATORIO REDES DE AREA LOCAL",
                            NumCredits = 2,
                            NumHours = 2,
                            NumSemester = 6
                        },
                        new
                        {
                            Id = 10,
                            Code = "ITID723",
                            IsLab = false,
                            Name = "REDES DE AREA EXTENDIDA",
                            NumCredits = 2,
                            NumHours = 3,
                            NumSemester = 6
                        },
                        new
                        {
                            Id = 11,
                            Code = "ITID723L",
                            IsLab = true,
                            Name = "LABORATORIO REDES DE AREA LOCAL",
                            NumCredits = 2,
                            NumHours = 2,
                            NumSemester = 6
                        },
                        new
                        {
                            Id = 12,
                            Code = "ITID524",
                            IsLab = false,
                            Name = "TRANSMISION DIGITAL",
                            NumCredits = 2,
                            NumHours = 2,
                            NumSemester = 5
                        },
                        new
                        {
                            Id = 13,
                            Code = "ITID524L",
                            IsLab = true,
                            Name = "LABORATORIO TRANSMISION DIGITAL",
                            NumCredits = 2,
                            NumHours = 2,
                            NumSemester = 5
                        },
                        new
                        {
                            Id = 14,
                            Code = "ITID452",
                            IsLab = false,
                            Name = "SISTEMAS OPERATIVOS",
                            NumCredits = 3,
                            NumHours = 3,
                            NumSemester = 4
                        },
                        new
                        {
                            Id = 15,
                            Code = "ITID433",
                            IsLab = false,
                            Name = "PROGRAMACION AVANZADA",
                            NumCredits = 2,
                            NumHours = 3,
                            NumSemester = 4
                        });
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("role");

                    b.Property<int?>("createdById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 14, 21, 3, 55, 516, DateTimeKind.Local).AddTicks(2406));

                    b.Property<int?>("deletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("updatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("isDeleted = 'false'");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            Name = "Admin",
                            Password = "password",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("Model.Entities.Classroom", b =>
                {
                    b.HasOne("Model.Entities.Building", "Building")
                        .WithMany("Classrooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Model.Entities.Group", b =>
                {
                    b.HasOne("Model.Entities.Classroom", "Classroom")
                        .WithMany("Groups")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Subject", "Subject")
                        .WithMany("Groups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Model.Entities.Session", b =>
                {
                    b.HasOne("Model.Entities.Group", "Group")
                        .WithMany("Sessions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Model.Entities.Building", b =>
                {
                    b.Navigation("Classrooms");
                });

            modelBuilder.Entity("Model.Entities.Classroom", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Model.Entities.Group", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Model.Entities.Subject", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
